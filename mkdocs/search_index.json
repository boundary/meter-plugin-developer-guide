{
    "docs": [
        {
            "location": "/", 
            "text": "Boundary Plugin Development Guide\n\n\nBoundary offers an API so you can graph any measurable metric in realtime, however, there is a small amount of work involved in getting the metrics you are measuring to Boundary for display. To help solve this problem we introduced plugins.\n\n\nA plugin is a tiny application that can be written in any language or script which simply reads the metric you are after and reports its value. The plugin is launched using the Plugin Manager which is built in to the meter, so no further installation is required.\n\n\nPlugins not only make it very easy to add arbitrary metric monitoring to Boundary but because plugins are kept in a central, public, repository, they can be shared by all.", 
            "title": "Home"
        }, 
        {
            "location": "/#boundary-plugin-development-guide", 
            "text": "Boundary offers an API so you can graph any measurable metric in realtime, however, there is a small amount of work involved in getting the metrics you are measuring to Boundary for display. To help solve this problem we introduced plugins.  A plugin is a tiny application that can be written in any language or script which simply reads the metric you are after and reports its value. The plugin is launched using the Plugin Manager which is built in to the meter, so no further installation is required.  Plugins not only make it very easy to add arbitrary metric monitoring to Boundary but because plugins are kept in a central, public, repository, they can be shared by all.", 
            "title": "Boundary Plugin Development Guide"
        }, 
        {
            "location": "/user-guide/overview/", 
            "text": "Meter Plugin Development Overview\n\n\nA Boundary Meter Plugin is a small application written in \nlua\n that regularly reports arbitrary metrics that may optionally include one or more dashboards.\n\n\nAnatomy of a Meter Plugin\n\n\nThe contents of a meter plugin are housed in a GitHub repository so that the can readily versioned and shared with the Boundary service (optional). All plugins are open source so the repository is required to be made public (note: github supports public repositories free of charge).\n\n\nA typically plugin consists of:\n\n\ninit.lua\n\n\nUser created lua program that continuously loops and collects metric values and then sends to the \nMeter Plugin Manager\n via standard out.\n\n\nplugin.json\n\n\nMeter plugin manifest that contains metadata about the meter plugin: command to run to start the plugin, inputs to the plugin, metric values created by the plugin, dashboard definitions, as a partial list.\n\n\nmetrics.json\n\n\nMeter plugin manifest that contains metadata about the meter plugin: command to run to start the plugin, inputs to the plugin, metric values created by the plugin, dashboard definitions, as a partial list.\n\n\nparam.json\n\n\nCreated by the \nMeter Plugin Manager\n at runtime to provide specific configuration to the plugin.\n\n\nREADME.md\n\n\nDocumentation that describes that platforms supported by the plugin, along with any dependent software and/or configuration required for the plugin to run.\n\n\nicon.png\n\n\nPath to an icon to display next to the plugin when browsing plugins in the Boundary settings dialog.\n\n\nOther Files\n\n\nAny other files, configuration, or specific libraries required by your meter plugin to run.\n\n\nDetails on the plugin contents will be discussed in greater detail later in this guide.\n\n\nMeasurement Sampling\n\n\nThere are two possible ways to perform polling within meter plugin:\n\n\nLooping\n\na technique whereby the process that does the polling does not exit by itself but instead polls metrics in a loop with a builtin delay between polls (minimum of 1 second). This technique is preferred as it removes any extra overhead incurred by stopping/starting a process for every poll.\n\n\nNon-looping\n\nthe simplest technique whereby the plugin performs a single poll of metrics. The Boundary relay will launch the plugin repeatedly on the polling interval to gather metrics. While this method continues to be supported by the meter manager, it is highly recommended that all new plugins be developed using the \nlooping\n polling method.\n\n\nTools\n\n\nBoundary provides other open source tools that assist in the development of meter plugins see \nTools", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/overview/#meter-plugin-development-overview", 
            "text": "A Boundary Meter Plugin is a small application written in  lua  that regularly reports arbitrary metrics that may optionally include one or more dashboards.", 
            "title": "Meter Plugin Development Overview"
        }, 
        {
            "location": "/user-guide/overview/#anatomy-of-a-meter-plugin", 
            "text": "The contents of a meter plugin are housed in a GitHub repository so that the can readily versioned and shared with the Boundary service (optional). All plugins are open source so the repository is required to be made public (note: github supports public repositories free of charge).  A typically plugin consists of:  init.lua  User created lua program that continuously loops and collects metric values and then sends to the  Meter Plugin Manager  via standard out.  plugin.json  Meter plugin manifest that contains metadata about the meter plugin: command to run to start the plugin, inputs to the plugin, metric values created by the plugin, dashboard definitions, as a partial list.  metrics.json  Meter plugin manifest that contains metadata about the meter plugin: command to run to start the plugin, inputs to the plugin, metric values created by the plugin, dashboard definitions, as a partial list.  param.json  Created by the  Meter Plugin Manager  at runtime to provide specific configuration to the plugin.  README.md  Documentation that describes that platforms supported by the plugin, along with any dependent software and/or configuration required for the plugin to run.  icon.png  Path to an icon to display next to the plugin when browsing plugins in the Boundary settings dialog.  Other Files  Any other files, configuration, or specific libraries required by your meter plugin to run.  Details on the plugin contents will be discussed in greater detail later in this guide.", 
            "title": "Anatomy of a Meter Plugin"
        }, 
        {
            "location": "/user-guide/overview/#measurement-sampling", 
            "text": "There are two possible ways to perform polling within meter plugin:  Looping \na technique whereby the process that does the polling does not exit by itself but instead polls metrics in a loop with a builtin delay between polls (minimum of 1 second). This technique is preferred as it removes any extra overhead incurred by stopping/starting a process for every poll.  Non-looping \nthe simplest technique whereby the plugin performs a single poll of metrics. The Boundary relay will launch the plugin repeatedly on the polling interval to gather metrics. While this method continues to be supported by the meter manager, it is highly recommended that all new plugins be developed using the  looping  polling method.", 
            "title": "Measurement Sampling"
        }, 
        {
            "location": "/user-guide/overview/#tools", 
            "text": "Boundary provides other open source tools that assist in the development of meter plugins see  Tools", 
            "title": "Tools"
        }, 
        {
            "location": "/user-guide/quick-start/", 
            "text": "Quick Start", 
            "title": "Simple Plugin Anatomy"
        }, 
        {
            "location": "/user-guide/quick-start/#quick-start", 
            "text": "", 
            "title": "Quick Start"
        }, 
        {
            "location": "/user-guide/getting-started/", 
            "text": "Getting Started\n\n\nThis page will provide an introduction to meter plugin development by outlining the development tasks to create a custom plugin. Next you will be walked through an existing plugin and its contents and deploy the meter plugin into your Boundary account.\n\n\nPlugin Development Tasks\n\n\nDevelopment of meter plugin consists of the following tasks:\n\n\n\n\nCreate a public \nGitHub\n repository.\n\n\nDevelop a script that polls the entity or system to be monitored and outputs metric values.\n\n\nDefine the metrics to be used by the plugin in \nmetrics.json\n.\n\n\nDefine the dashboards that will display the measurements from the plugin.\n\n\nDesign an \nicon.png\n to be displayed with your plugin.\n\n\nDefine a  \nplugin.json\n file that describes your meter plugin.\n\n\nWrite a README.md file using the perscribed template.\n\n\nCommit all of the plugin content and push to your public GitHub repository.\n\n\nStage your meter plugin into your account.\n\n\nDeploy the meter plugin into a meter installed on a server.\n\n\nView metric collection on a Boundary dashboard\n\n\n\n\nExample Meter Plugin\n\n\nTo get started we are going to walk through the contents of an existing plugin and deploy a meter plugin into a Boundary account. This will short cut the number of development tasks outlined earlier so you can gain some initial experience when developing your custom meter plugin. The example meter plugin \nboundary-plugin-ticker\n collects stock price and volume from the user configured \nticker symbol\n.\n\n\nThe steps to run the meter\n\n\n\n\nMake a copy of an existing plugin repository which contains a complete plugin\n\n\nStage the plugin into a Boundary account\n\n\nAdd the plugin into a Boundary account.\n\n\nAdd the plugin to a meter\n\n\nView metric values on Dashboard\n\n\n\n\nBefore proceeding with the steps outlined above the following prerequisites must be satisfied:\n\n\n\n\nGitHub\n account\n\n\nCommand line installation of Git, \ndownload\n\n\nAdministrative login for a Boundary account. You can create a free account \nhere\n\n\nA meter deployed on a Linux system.\n\n\n\n\nCopying an Existing Meter Plugin Repository\n\n\nTo use an existing plugin we need to clone the existing plugin repository into your user/organization.\n\n\n\n\nOpen a web browser and navigate\n\n\n\n\nStage Plugin Into Boundary Account\n\n\nAdd Plugin Into a Boundary Account\n\n\nDeploy the Plugin into a Meter\n\n\nObserve Metric Values on Dashboard", 
            "title": "Getting Started"
        }, 
        {
            "location": "/user-guide/getting-started/#getting-started", 
            "text": "This page will provide an introduction to meter plugin development by outlining the development tasks to create a custom plugin. Next you will be walked through an existing plugin and its contents and deploy the meter plugin into your Boundary account.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/user-guide/getting-started/#plugin-development-tasks", 
            "text": "Development of meter plugin consists of the following tasks:   Create a public  GitHub  repository.  Develop a script that polls the entity or system to be monitored and outputs metric values.  Define the metrics to be used by the plugin in  metrics.json .  Define the dashboards that will display the measurements from the plugin.  Design an  icon.png  to be displayed with your plugin.  Define a   plugin.json  file that describes your meter plugin.  Write a README.md file using the perscribed template.  Commit all of the plugin content and push to your public GitHub repository.  Stage your meter plugin into your account.  Deploy the meter plugin into a meter installed on a server.  View metric collection on a Boundary dashboard", 
            "title": "Plugin Development Tasks"
        }, 
        {
            "location": "/user-guide/getting-started/#example-meter-plugin", 
            "text": "To get started we are going to walk through the contents of an existing plugin and deploy a meter plugin into a Boundary account. This will short cut the number of development tasks outlined earlier so you can gain some initial experience when developing your custom meter plugin. The example meter plugin  boundary-plugin-ticker  collects stock price and volume from the user configured  ticker symbol .  The steps to run the meter   Make a copy of an existing plugin repository which contains a complete plugin  Stage the plugin into a Boundary account  Add the plugin into a Boundary account.  Add the plugin to a meter  View metric values on Dashboard   Before proceeding with the steps outlined above the following prerequisites must be satisfied:   GitHub  account  Command line installation of Git,  download  Administrative login for a Boundary account. You can create a free account  here  A meter deployed on a Linux system.   Copying an Existing Meter Plugin Repository  To use an existing plugin we need to clone the existing plugin repository into your user/organization.   Open a web browser and navigate   Stage Plugin Into Boundary Account  Add Plugin Into a Boundary Account  Deploy the Plugin into a Meter  Observe Metric Values on Dashboard", 
            "title": "Example Meter Plugin"
        }, 
        {
            "location": "/user-guide/protocol/", 
            "text": "Meter Plugin Protocol\n\n\nAs mentioned previously meter plugins can be programmed using any language that can write to standard out.\n\n\nThe Boundary Meter delegates the management of all meter plugins to the plugin manager.\n\n\nThe plugin manager expects a script or program to send metrics via standard output with the given format:\n\n\nMETRIC_IDENTIFIER\n \nMETRIC_VALUE\n \nMETRIC_SOURCE\n \nMETRIC_TIMESTAMP\n\\n\n\n\n\n\nwhere\n\n\nMETRIC_IDENTIFIER\n is a reference to a previous defined metric for this measurement\n\nMETRIC_VALUE\n is the measurement value of the metric\n\nMETRIC_SOURCE\n is the source of the measurement\n\nMETRIC_TIMESTAMP\n is the time of the measurement which is either seconds from epoch or milli-seconds from epoch\n\n\nAll of the above fields are not required with suitable defaults being applied for missing values as follows:\n\n\n\n\n\n\nIn the case where the \nMETRIC_TIMESTAMP\n is missing the timestamp is set to the receipt time at the meter manager.\n\n\n\n\n\n\nIn the case where the \nMETRIC_SOURCE\n and \nMETRIC_TIMESTAMP\n are missing the source defaults to the host where the plugin is running.\n\n\n\n\n\n\nIn the unique case where only a \nMETRIC_VALUE\n is provided the \nMETRIC_IDENTIFIER\n is assumed to be the first one in listed in the \nmetrics\n field in the \nplugin.json\n (see the topic \nManifest\n).", 
            "title": "Protocol"
        }, 
        {
            "location": "/user-guide/protocol/#meter-plugin-protocol", 
            "text": "As mentioned previously meter plugins can be programmed using any language that can write to standard out.  The Boundary Meter delegates the management of all meter plugins to the plugin manager.  The plugin manager expects a script or program to send metrics via standard output with the given format:  METRIC_IDENTIFIER   METRIC_VALUE   METRIC_SOURCE   METRIC_TIMESTAMP \\n  where  METRIC_IDENTIFIER  is a reference to a previous defined metric for this measurement METRIC_VALUE  is the measurement value of the metric METRIC_SOURCE  is the source of the measurement METRIC_TIMESTAMP  is the time of the measurement which is either seconds from epoch or milli-seconds from epoch  All of the above fields are not required with suitable defaults being applied for missing values as follows:    In the case where the  METRIC_TIMESTAMP  is missing the timestamp is set to the receipt time at the meter manager.    In the case where the  METRIC_SOURCE  and  METRIC_TIMESTAMP  are missing the source defaults to the host where the plugin is running.    In the unique case where only a  METRIC_VALUE  is provided the  METRIC_IDENTIFIER  is assumed to be the first one in listed in the  metrics  field in the  plugin.json  (see the topic  Manifest ).", 
            "title": "Meter Plugin Protocol"
        }, 
        {
            "location": "/user-guide/metrics/", 
            "text": "Metric Definitions\n\n\nMetric definitions in Boundary provide metadata about measurements input to the Boundary monitoring system. This page provides details on metric definitions including:\n\n\n\n\nHow to define metrics\n\n\nBest practices with respect to their naming.\n\n\n\n\nA \nmetric definition\n consists of 7 values:\n\n\n\n\nName\n - unique metric identifier\n\n\nDisplay Name\n - Label used within the web interface.\n\n\nShort Display Name\n - Shortened label used with the web interface.\n\n\nDescription\n - Text that describes the metric.\n\n\nDefault Aggregate\n - Type of aggregate displayed by default\n\n\nUnit\n - Quantity measured by this metric\n\n\nDefault Resolution\n - Expected frequency of measurement update\n\n\n\n\nName\n\n\nMetric identifiers are unique immutable keys within a Boundary account. Metric identifiers are referenced in the plugin manifest (see \nPlugin Manifest\n) and when a plugin is deployed in an account other then where the metric definitions were created, they are \ncopied\n into the new account.\n\n\nMetric identifiers are case insenstive but by convention they are always in upper case letters (A-Z) with allowance for a underscore (_) or dash(-) between logical words. This convention should be adhered to when defining or referencing a metric.\n\n\nMetric identifiers from the same plugin should have a prefix to group similar metrics (e.g. \nAWS_ELB_LATENCY\n). Metric names that are prefixed with \nBOUNDARY\n should be considered reserved for Boundary\u2019s internal use.\n\n\nDisplay Name\n\n\nDisplay name is the primary label used by web user interface to reference a metric and/or its measurement. The display name appears in the following locations within the web user interface:\n\n\n\n\nHeadings of graphs in dashboards\n\n\nList of items with the \nmetrics settings\n dialog\n\n\nDrop down list when defining an \nAlarm\n\n\n\n\nEach display name should have a common prefix so that similar metrics are grouped together and provides a hint of the system or identity to be monitored (e.g. \nAPACHE_BYTES_PER_REQUEST\n).\n\n\nShort Display Name\n\n\nThe short display name is used in cases where using there is limited space to use the display name as a label. For example the short display name is used as:\n\n\n\n\nList of items available metrics when editing a dashboard (\nSettings\n =\n \nDashboards\n).\n\n\nLabel when selecting a data point on a dashboard.\n\n\n\n\nThe short display name should be limited to 20 characters or less.\n\n\nDescription\n\n\nShould be a concise definition that describes the metric. The description should indicate if the metric is a rate, what are the units of the metric (e.g. x/second),etc.\n\n\nWhen building a dashboard using the dashboard editor, the \ntool tip\n associated with each item in the list of available metrics is the description.\n\n\nDefault Aggregate\n\n\nDefault aggregate indicates which type of aggregate is displayed in dashboards by default. The following aggregates are supported:\n\n\n\n\nAverage\n\n\nMaximum\n\n\nMinimum\n\n\nSum\n\n\n\n\nUnit\n\n\nA metric quantity is described by a unit which is one of the following:\n\n \nCount Of Bytes\n\n\n \nDuration\n\n\n \nNumber\n\n\n \nPercentage\n\n\nDefault Resolution\n\n\nDefault resolution describes how often measurements for this metric will be updated. This value is used to extend the line on a dashboard to provide better visualization, instead of drawing single points.\n\n\nDefining Metrics\n\n\nMetric definitions are defined in Boundary using either:\n\n\n\n\nWeb user interface\n\n\nREST APIs\n\n\nCommand line utilities.\n\n\n\n\nDetails on the use of the REST APIs for metric definition can be found \nhere\n. The remaining methods are described in the next sections.\n\n\nDefining Metrics Using the Web User Interface\n\n\n\n\nLogin into Boundary\n\n\n\n\nDisplay the settings dialog by clicking on the \nsettings icon\n in the menu: \n\n\n\n\n\n\nClick on \nMetrics\n in the left hand side of the dialog which then displays the \nMetrics\n dialog:\n\n\n\n\n\n\n\nClick on the \nCreate Metric\n button which displays a form to define a new metric. Fill out the form as shown here:\n\n\n\n\n\n\n\nClick on the \nSave\n button to create the metric.\n\n\n\n\n\n\nClick on the \nClose\n button to dismiss the dialog.\n\n\n\n\n\n\nDefining Metrics Using Command Line Utilities\n\n\n\n\nInstall the Boundary API CLI and configure according to instructions \nhere\n\n\nCreate the metric using \nmetric-create\n:\n\n\n\n\n$ metric-create -n BOUNDARY_FOO_METRIC_IN -d \nBoundary Foo Metric In\n -s \nFoo In\n -i \nTracks the Boundary Foo Metric\n -g AVG -i number -r 1000\n{\n  \nresult\n: {\n    \nsuccess\n: true\n  }\n}\n\n\n\n\nBatch Definition of Metrics Using Command Line Utilities\n\n\n\n\nInstall the Boundary API CLI, if not already installed, and configure according to instructions \nhere\n\n\nDefine metrics in a JSON file named \nmetrics.json\n:\n\n\n\n\n{\n    \nBOUNDARY_METRIC_ONE\n: {\n        \ndefaultAggregate\n: \nAVG\n,\n        \ndefaultResolutionMS\n: 2000,\n        \ndescription\n: \nExample metric one for my meter plugin\n,\n        \ndisplayName\n: \nMetric One\n,\n        \ndisplayNameShort\n: \nMetric #1\n,\n        \nisDisabled\n: 0,\n        \nunit\n: \nnumber\n\n    },\n    \nBOUNDARY_METRIC_ONE\n: {\n        \ndefaultAggregate\n: \nMAX\n,\n        \ndefaultResolutionMS\n: 5000,\n        \ndescription\n: \nExample metric two for my meter plugin\n,\n        \ndisplayName\n: \nMetric Two\n,\n        \ndisplayNameShort\n: \nMetric #2\n,\n        \nisDisabled\n: 0,\n        \nunit\n: \npercent\n\n    }\n    ...\n}\n\n\n\n\n\n\nCreate the metric definitions using the \nmetric-create-batch\n:\n\n\n\n\n$ metric-create -f metrics.json\n{\n  \nresult\n: {\n    \nsuccess\n: true\n  }\n}", 
            "title": "Metrics"
        }, 
        {
            "location": "/user-guide/metrics/#metric-definitions", 
            "text": "Metric definitions in Boundary provide metadata about measurements input to the Boundary monitoring system. This page provides details on metric definitions including:   How to define metrics  Best practices with respect to their naming.   A  metric definition  consists of 7 values:   Name  - unique metric identifier  Display Name  - Label used within the web interface.  Short Display Name  - Shortened label used with the web interface.  Description  - Text that describes the metric.  Default Aggregate  - Type of aggregate displayed by default  Unit  - Quantity measured by this metric  Default Resolution  - Expected frequency of measurement update   Name  Metric identifiers are unique immutable keys within a Boundary account. Metric identifiers are referenced in the plugin manifest (see  Plugin Manifest ) and when a plugin is deployed in an account other then where the metric definitions were created, they are  copied  into the new account.  Metric identifiers are case insenstive but by convention they are always in upper case letters (A-Z) with allowance for a underscore (_) or dash(-) between logical words. This convention should be adhered to when defining or referencing a metric.  Metric identifiers from the same plugin should have a prefix to group similar metrics (e.g.  AWS_ELB_LATENCY ). Metric names that are prefixed with  BOUNDARY  should be considered reserved for Boundary\u2019s internal use.  Display Name  Display name is the primary label used by web user interface to reference a metric and/or its measurement. The display name appears in the following locations within the web user interface:   Headings of graphs in dashboards  List of items with the  metrics settings  dialog  Drop down list when defining an  Alarm   Each display name should have a common prefix so that similar metrics are grouped together and provides a hint of the system or identity to be monitored (e.g.  APACHE_BYTES_PER_REQUEST ).  Short Display Name  The short display name is used in cases where using there is limited space to use the display name as a label. For example the short display name is used as:   List of items available metrics when editing a dashboard ( Settings  =   Dashboards ).  Label when selecting a data point on a dashboard.   The short display name should be limited to 20 characters or less.  Description  Should be a concise definition that describes the metric. The description should indicate if the metric is a rate, what are the units of the metric (e.g. x/second),etc.  When building a dashboard using the dashboard editor, the  tool tip  associated with each item in the list of available metrics is the description.  Default Aggregate  Default aggregate indicates which type of aggregate is displayed in dashboards by default. The following aggregates are supported:   Average  Maximum  Minimum  Sum   Unit  A metric quantity is described by a unit which is one of the following:   Count Of Bytes    Duration    Number    Percentage  Default Resolution  Default resolution describes how often measurements for this metric will be updated. This value is used to extend the line on a dashboard to provide better visualization, instead of drawing single points.", 
            "title": "Metric Definitions"
        }, 
        {
            "location": "/user-guide/metrics/#defining-metrics", 
            "text": "Metric definitions are defined in Boundary using either:   Web user interface  REST APIs  Command line utilities.   Details on the use of the REST APIs for metric definition can be found  here . The remaining methods are described in the next sections.  Defining Metrics Using the Web User Interface   Login into Boundary   Display the settings dialog by clicking on the  settings icon  in the menu:     Click on  Metrics  in the left hand side of the dialog which then displays the  Metrics  dialog:    Click on the  Create Metric  button which displays a form to define a new metric. Fill out the form as shown here:    Click on the  Save  button to create the metric.    Click on the  Close  button to dismiss the dialog.    Defining Metrics Using Command Line Utilities   Install the Boundary API CLI and configure according to instructions  here  Create the metric using  metric-create :   $ metric-create -n BOUNDARY_FOO_METRIC_IN -d  Boundary Foo Metric In  -s  Foo In  -i  Tracks the Boundary Foo Metric  -g AVG -i number -r 1000\n{\n   result : {\n     success : true\n  }\n}  Batch Definition of Metrics Using Command Line Utilities   Install the Boundary API CLI, if not already installed, and configure according to instructions  here  Define metrics in a JSON file named  metrics.json :   {\n     BOUNDARY_METRIC_ONE : {\n         defaultAggregate :  AVG ,\n         defaultResolutionMS : 2000,\n         description :  Example metric one for my meter plugin ,\n         displayName :  Metric One ,\n         displayNameShort :  Metric #1 ,\n         isDisabled : 0,\n         unit :  number \n    },\n     BOUNDARY_METRIC_ONE : {\n         defaultAggregate :  MAX ,\n         defaultResolutionMS : 5000,\n         description :  Example metric two for my meter plugin ,\n         displayName :  Metric Two ,\n         displayNameShort :  Metric #2 ,\n         isDisabled : 0,\n         unit :  percent \n    }\n    ...\n}   Create the metric definitions using the  metric-create-batch :   $ metric-create -f metrics.json\n{\n   result : {\n     success : true\n  }\n}", 
            "title": "Defining Metrics"
        }, 
        {
            "location": "/user-guide/manifest/", 
            "text": "Meter Plugin Manifest\n\n\nThe \nplugin.json\n file contains metadata used for describing the meter plugin. Information contained within this manifest is used to:\n\n\n\n\nName the plugin and provide help information when browsing the available meter plugins.\n\n\nIndicate the command or script to execute which implements the meter plugin.\n\n\nDefine the required fields used to configure the meter plugin.\n\n\n\n\nExample Plugin Manifest\n\n\nBelow is a sample \nplugin.json\n that is bundled with an example meter plugin that reports measurements on a stock(s) market price and volume. The complete meter plugin for this example is located in the GitHub repository \nhere\n.\n\n\n    {\n    \nname\n: \nTicker\n,\n    \nversion\n: \n1.0.0\n,\n    \ntags\n: \nmeter\n,\n    \ndescription\n: \nCollects price and volume of a traded stock\n,\n    \nicon\n: \nticker.png\n,\n    \ncommand\n: \npython plugin.py\n,\n    \nignore\n: \nconfig\n,\n    \nmetrics\n: [\n      \nBOUNDARY_STOCK_PRICE\n,\n      \nBOUNDARY_STOCK_VOLUME\n\n    ],\n    \ndashboards\n: [\n      {\n        \nname\n: \nStocks\n,\n        \nlayout\n: \nd-w=1\nd-h=2\nd-pad=15\nd-bg=none\nd-g-BOUNDARY_STOCK_PRICE=0-0-1-1\nd-g-BOUNDARY_STOCK_VOLUME=0-1-1-1\n\n      }\n    ],\n    \npostExtract\n: \npython post-extract.py\n,\n    \nparamArray\n: {\n      \nitemTitle\n: [\n        \nticker\n\n      ],\n      \nschemaTitle\n: \nStock\n\n    },\n    \nparamSchema\n: [\n        {\n          \ntitle\n: \nTicker\n,\n          \nname\n: \nticker\n,\n          \ndescription\n: \nStock ticker symbol\n,\n          \ntype\n: \nstring\n,\n          \ndefault\n: \n,\n          \nrequired\n: true\n        }\n      ]\n    }\n\n\n\n\nSingle versus Multiple Configuration Items\n\n\nMeter plugins have either a single or multiple configuration items per plugin. A configuration item is an array of JSON objects that define a database connection, REST API endpoint, or entity or system the meter plugin wishes to extract measurements from.\n\n\nIn most cases, it is perferred that a plugin have multiple configurations, so that a single plugin installed on meter can collect measurements from multiple instances of a managed system, such as database system, running on the same host. A multiple configuration meter plugin enables proxy measurement of multiple entities external to the meter and plugin where the meter is unable to run, such as networking equipment.\n\n\nJSON Object Reference\n\n\nA description of each of the JSON objects contain within the \nplugin.json\n manifest is described in detail in the sections that follow.\n\n\ncommand\n\n\nA string representing a path to a command or script, along with arguments, to be executed to run the meter plugin. Although a meter plugin may contain other programs and/or scripts, the path and arguments assigned to the \ncommand\n field launches the main process responsible for orchestrating the collection of measurements.\n\n\nThe \ncommand\n field accepts \nmacros\n of the form:\n\n\n$(macro_name)\n\n\n\n\nwhich are replaced prior to execution of by fields defined in the \nparamSchema\n object array described later. Currently there is a single built in value: \npollInterval\n. The meter manager also provides at runtime the same macro values in JSON file \nparam.json\n that can be parsed by the meter plugin. Further discussion of the param.json file is discussed in \nparameters\n\n\nNOTE:\n Arguments passed within the \ncommand\n field are visible in process listings and as such sensivity such as user names and passwords should not be passed via macros.\n\n\nAs mentioned previously in the \nmeter plugin overview\n, measurement polling by meter plugins is either by \nlooping\n or \nnon-looping\n method. With the previous the preferred method, due to overhead caused by invoking a operating system process.\n\n\ndescription\n\n\nProvides a brief summary of the meter plugin function. When a list of plugins is shown in the Boundary plugin dialog, the text of the description shows below the name of the plugin as shown here:\n\n\n\n\nicon\n\n\nA string with a relative path to an icon in the GitHub repository to be display in any view that lists meter plugins. Icon should be a 48x48 pixel in \nPortable Network Graphics (PNG) format\n\n\ncommand_lua\n\n\nInvokes the provide string using the Boundary meter's built in \nlua\n interpreter as follows:\n\n\n$ boundary-meter \nstring value of command_lua\n\n\n\n\n\nignore\n\n\nA string or array of strings that designates a set of files/directories within the plugin directory to ignore when validating. In order to insure the correct version of a plugin is running, the Boundary plugin manager will compare checksums of all plugin files installed to the ones in the repository. If the plugin generates extra files when installing or executing it should list them here otherwise the Boundary plugin manager will attempt to re-install the plugin. Can be a string or an array of strings.\n\n\nmetrics\n\n\nA string array of the metric identifiers associated and used by the meter plugin (see \nMetrics\n) for a complete description of metric identifiers and their definitions). The metric definitions must exist a head of time or an error will ocurr. See \nMetrics\n for additional details about metric definitions.\n\n\nname\n\n\nDescriptive title of the meter plugin\n\n\ndashboard\n\n\nAn object array with a \nname\n and \nlayout\n fields which describe a \ndashboard\n definition(s) to be installed into an account when the plugin itself is added to an account.\n\n\n\n\nname\n a string containg text that is displayed as the title for the dashboard which displays in the dashboard drop down menu.\n\n\nlayout\n a string that contains the dashboard layout. A layout is obtained using dashboard editor dialog, by clicking on the icon \n, next to the \nCopy layout\n . This copies the layout definition to your clipboard, which can the subsequently assigned to the \nlayout\n field in the dashboard definition.\n\n\n\n\nExample Dashboard Definition\n\n\n    \ndashboards\n : [\n        {\n          \nname\n: \nPlugin Shell\n,\n          \nlayout\n: \nd-w=3\nd-h=2\nd-pad=5\nd-bg=none\nd-g-BOUNDARY_METRIC_TEST=0-0-3-2\n\n        },\n        ...\n    ],\n\n\n\n\npostExtract\n\n\nA string representing a path to a command or script, and arguments, to be run after the plugin contents are extracted to the local file system where the plugins are stored (typical \n/etc/boundary/plugins\n for Linux/UNIX systems and \nProgram Files\\Boundary\\plugins\n for Windows).\n\n\npostExtract_lua\n\n\nSame as the \npostExtract\n except the value of \npostExtract_lua\n is invoked using the Boundary meter's built in \nlua\n interpreter as follows:\n\n\n$ boundary-meter \nstring value of postExtract_lua\n\n\n\n\n\nparamArray\n\n\nAn object array with a \nitemTitle\n and \nschemaTitle\n. The \nitemTitle\n identifies the field in the \nparamSchema\n that is displayed to identify multiple configuration items.\n\n\n    \nparamArray\n: {\n      \nitemTitle\n: [ \nname\n ],\n      \nschemaTitle\n: \nMetric Command\n\n    }\n\n\n\n\nparamaSchema\n\n\nAn object array with the following:\n- title\n- name\n- description\n- type\n- default\n- required\n\n\nDetails on each of the fields follow.\n\n\ntitle\n\n\nThe title is the label used to describe a plugin configuration. For plugins with multiple configurations it appears in the configuration dialog.\n\n\nname\n\n\nUnique string identifier that identifies a plugin configuration parameter.\n\n\nThe name defines a macro of the form: \n$(name)\n and also defines a field in the param.json file which is discussed in \nparameters\n.\n\n\ndescription\n\n\nProvides details about the plugin configuration parameter. In the configuration dialog the description appears as a tooltip when the mouse is held over the input field.\n\n\ntype\n\n\nIndicated the data type of the configuration field which can one of the following:\n\n\n\n\nstring\n\n\ninteger\n\n\nboolean\n\n\nenum\n\n\npassword\n\n\narray\n\n\n\n\ndefault\n\n\nInitial value to populate the given field.\n\n\nrequired\n\n\nBoolean indicating that value for this field must be specified. Without a value the configuration cannot be saved to the meter plugin.\n\n\nExample Field Definitions\n\n\nThe following is the \nparamArray\n and \nparamSchema\n definitions from the example plugin \nboundary-plugin-dialog\n which is located in \nthis\n GitHub repository.\n\n\n...\n    \nparamArray\n: { \nitemTitle\n: [ \nstring\n ], \nschemaTitle\n: \nExample Dialog Configuration\n },\n    \nparamSchema\n: [\n        {\n            \ntitle\n: \nString Type\n,\n            \nname\n: \nstring\n,\n            \ndescription\n: \nA simple text field. Can have a default value and be required.\n,\n            \ntype\n: \nstring\n,\n            \ndefault\n: \nhello\n,\n            \nrequired\n: true\n        },\n        {\n            \ntitle\n : \nPassword Type\n,\n            \nname\n : \npassword\n,\n            \ndescription\n : \nA simple text field that obsecures the text.\n,\n            \ntype\n : \npassword\n\n        },\n        {\n            \ntitle\n: \nBoolean Type\n,\n            \nname\n: \nboolean\n,\n            \ndescription\n: \nA checkbox field. Can have a default value and be required\n,\n            \ntype\n: \nboolean\n,\n            \ndefault\n: false,\n            \nrequired\n: false\n        },\n        {\n            \ntitle\n: \nEnum Type\n,\n            \nname\n: \nenum\n,\n            \ndescription\n: \nA dropdown list of enumerated values. Can have a default and be required\n,\n            \ntype\n : { \nenum\n : [[\nRed\n, \nred\n], [\nGreen\n, \ngreen\n], [\nBlue\n,\nblue\n]] },\n            \ndefault\n : \nred\n,\n            \nrequired\n: true\n        },\n        {\n            \ntitle\n: \nString Array Type\n,\n            \nname\n: \nstring_array\n,\n            \ndescription\n: \n,\n            \ntype\n : \narray\n,\n            \nitems\n : { \ntype\n : \nstring\n }\n        },\n        {\n            \ntitle\n: \nBoolean Array Type\n,\n            \nname\n: \narray\n,\n            \ndescription\n: \n,\n            \ntype\n : \narray\n,\n            \nitems\n : { \ntype\n : \nboolean\n }\n        },\n        {\n            \ntitle\n: \nEnum Array Type\n,\n            \nname\n: \narray\n,\n            \ndescription\n: \n,\n            \ntype\n : \narray\n,\n            \nitems\n : { \ntype\n : \nenum\n }\n        }\n    ]\n...", 
            "title": "Manifest"
        }, 
        {
            "location": "/user-guide/manifest/#meter-plugin-manifest", 
            "text": "The  plugin.json  file contains metadata used for describing the meter plugin. Information contained within this manifest is used to:   Name the plugin and provide help information when browsing the available meter plugins.  Indicate the command or script to execute which implements the meter plugin.  Define the required fields used to configure the meter plugin.   Example Plugin Manifest  Below is a sample  plugin.json  that is bundled with an example meter plugin that reports measurements on a stock(s) market price and volume. The complete meter plugin for this example is located in the GitHub repository  here .      {\n     name :  Ticker ,\n     version :  1.0.0 ,\n     tags :  meter ,\n     description :  Collects price and volume of a traded stock ,\n     icon :  ticker.png ,\n     command :  python plugin.py ,\n     ignore :  config ,\n     metrics : [\n       BOUNDARY_STOCK_PRICE ,\n       BOUNDARY_STOCK_VOLUME \n    ],\n     dashboards : [\n      {\n         name :  Stocks ,\n         layout :  d-w=1 d-h=2 d-pad=15 d-bg=none d-g-BOUNDARY_STOCK_PRICE=0-0-1-1 d-g-BOUNDARY_STOCK_VOLUME=0-1-1-1 \n      }\n    ],\n     postExtract :  python post-extract.py ,\n     paramArray : {\n       itemTitle : [\n         ticker \n      ],\n       schemaTitle :  Stock \n    },\n     paramSchema : [\n        {\n           title :  Ticker ,\n           name :  ticker ,\n           description :  Stock ticker symbol ,\n           type :  string ,\n           default :  ,\n           required : true\n        }\n      ]\n    }  Single versus Multiple Configuration Items  Meter plugins have either a single or multiple configuration items per plugin. A configuration item is an array of JSON objects that define a database connection, REST API endpoint, or entity or system the meter plugin wishes to extract measurements from.  In most cases, it is perferred that a plugin have multiple configurations, so that a single plugin installed on meter can collect measurements from multiple instances of a managed system, such as database system, running on the same host. A multiple configuration meter plugin enables proxy measurement of multiple entities external to the meter and plugin where the meter is unable to run, such as networking equipment.  JSON Object Reference  A description of each of the JSON objects contain within the  plugin.json  manifest is described in detail in the sections that follow.  command  A string representing a path to a command or script, along with arguments, to be executed to run the meter plugin. Although a meter plugin may contain other programs and/or scripts, the path and arguments assigned to the  command  field launches the main process responsible for orchestrating the collection of measurements.  The  command  field accepts  macros  of the form:  $(macro_name)  which are replaced prior to execution of by fields defined in the  paramSchema  object array described later. Currently there is a single built in value:  pollInterval . The meter manager also provides at runtime the same macro values in JSON file  param.json  that can be parsed by the meter plugin. Further discussion of the param.json file is discussed in  parameters  NOTE:  Arguments passed within the  command  field are visible in process listings and as such sensivity such as user names and passwords should not be passed via macros.  As mentioned previously in the  meter plugin overview , measurement polling by meter plugins is either by  looping  or  non-looping  method. With the previous the preferred method, due to overhead caused by invoking a operating system process.  description  Provides a brief summary of the meter plugin function. When a list of plugins is shown in the Boundary plugin dialog, the text of the description shows below the name of the plugin as shown here:   icon  A string with a relative path to an icon in the GitHub repository to be display in any view that lists meter plugins. Icon should be a 48x48 pixel in  Portable Network Graphics (PNG) format  command_lua  Invokes the provide string using the Boundary meter's built in  lua  interpreter as follows:  $ boundary-meter  string value of command_lua   ignore  A string or array of strings that designates a set of files/directories within the plugin directory to ignore when validating. In order to insure the correct version of a plugin is running, the Boundary plugin manager will compare checksums of all plugin files installed to the ones in the repository. If the plugin generates extra files when installing or executing it should list them here otherwise the Boundary plugin manager will attempt to re-install the plugin. Can be a string or an array of strings.  metrics  A string array of the metric identifiers associated and used by the meter plugin (see  Metrics ) for a complete description of metric identifiers and their definitions). The metric definitions must exist a head of time or an error will ocurr. See  Metrics  for additional details about metric definitions.  name  Descriptive title of the meter plugin  dashboard  An object array with a  name  and  layout  fields which describe a  dashboard  definition(s) to be installed into an account when the plugin itself is added to an account.   name  a string containg text that is displayed as the title for the dashboard which displays in the dashboard drop down menu.  layout  a string that contains the dashboard layout. A layout is obtained using dashboard editor dialog, by clicking on the icon  , next to the  Copy layout  . This copies the layout definition to your clipboard, which can the subsequently assigned to the  layout  field in the dashboard definition.   Example Dashboard Definition       dashboards  : [\n        {\n           name :  Plugin Shell ,\n           layout :  d-w=3 d-h=2 d-pad=5 d-bg=none d-g-BOUNDARY_METRIC_TEST=0-0-3-2 \n        },\n        ...\n    ],  postExtract  A string representing a path to a command or script, and arguments, to be run after the plugin contents are extracted to the local file system where the plugins are stored (typical  /etc/boundary/plugins  for Linux/UNIX systems and  Program Files\\Boundary\\plugins  for Windows).  postExtract_lua  Same as the  postExtract  except the value of  postExtract_lua  is invoked using the Boundary meter's built in  lua  interpreter as follows:  $ boundary-meter  string value of postExtract_lua   paramArray  An object array with a  itemTitle  and  schemaTitle . The  itemTitle  identifies the field in the  paramSchema  that is displayed to identify multiple configuration items.       paramArray : {\n       itemTitle : [  name  ],\n       schemaTitle :  Metric Command \n    }  paramaSchema  An object array with the following:\n- title\n- name\n- description\n- type\n- default\n- required  Details on each of the fields follow.  title  The title is the label used to describe a plugin configuration. For plugins with multiple configurations it appears in the configuration dialog.  name  Unique string identifier that identifies a plugin configuration parameter.  The name defines a macro of the form:  $(name)  and also defines a field in the param.json file which is discussed in  parameters .  description  Provides details about the plugin configuration parameter. In the configuration dialog the description appears as a tooltip when the mouse is held over the input field.  type  Indicated the data type of the configuration field which can one of the following:   string  integer  boolean  enum  password  array   default  Initial value to populate the given field.  required  Boolean indicating that value for this field must be specified. Without a value the configuration cannot be saved to the meter plugin.  Example Field Definitions  The following is the  paramArray  and  paramSchema  definitions from the example plugin  boundary-plugin-dialog  which is located in  this  GitHub repository.  ...\n     paramArray : {  itemTitle : [  string  ],  schemaTitle :  Example Dialog Configuration  },\n     paramSchema : [\n        {\n             title :  String Type ,\n             name :  string ,\n             description :  A simple text field. Can have a default value and be required. ,\n             type :  string ,\n             default :  hello ,\n             required : true\n        },\n        {\n             title  :  Password Type ,\n             name  :  password ,\n             description  :  A simple text field that obsecures the text. ,\n             type  :  password \n        },\n        {\n             title :  Boolean Type ,\n             name :  boolean ,\n             description :  A checkbox field. Can have a default value and be required ,\n             type :  boolean ,\n             default : false,\n             required : false\n        },\n        {\n             title :  Enum Type ,\n             name :  enum ,\n             description :  A dropdown list of enumerated values. Can have a default and be required ,\n             type  : {  enum  : [[ Red ,  red ], [ Green ,  green ], [ Blue , blue ]] },\n             default  :  red ,\n             required : true\n        },\n        {\n             title :  String Array Type ,\n             name :  string_array ,\n             description :  ,\n             type  :  array ,\n             items  : {  type  :  string  }\n        },\n        {\n             title :  Boolean Array Type ,\n             name :  array ,\n             description :  ,\n             type  :  array ,\n             items  : {  type  :  boolean  }\n        },\n        {\n             title :  Enum Array Type ,\n             name :  array ,\n             description :  ,\n             type  :  array ,\n             items  : {  type  :  enum  }\n        }\n    ]\n...", 
            "title": "Meter Plugin Manifest"
        }, 
        {
            "location": "/user-guide/parameters/", 
            "text": "Parameters\n\n\nThis section describes the \nparam.json\n file that is the input configuration to a meter plugin. The meter manager generates \nparam.json\n file from \nparamSchema\n elements in the \nplugin.json\n file.\n\n\nSingle Configuration\n\n\nMultiple Configuration", 
            "title": "Parameters"
        }, 
        {
            "location": "/user-guide/parameters/#parameters", 
            "text": "This section describes the  param.json  file that is the input configuration to a meter plugin. The meter manager generates  param.json  file from  paramSchema  elements in the  plugin.json  file.", 
            "title": "Parameters"
        }, 
        {
            "location": "/user-guide/parameters/#single-configuration", 
            "text": "", 
            "title": "Single Configuration"
        }, 
        {
            "location": "/user-guide/parameters/#multiple-configuration", 
            "text": "", 
            "title": "Multiple Configuration"
        }, 
        {
            "location": "/user-guide/framework/", 
            "text": "Framework\n\n\nNeeds to provide 80% of the plugin", 
            "title": "Framework"
        }, 
        {
            "location": "/user-guide/framework/#framework", 
            "text": "Needs to provide 80% of the plugin", 
            "title": "Framework"
        }, 
        {
            "location": "/user-guide/testing/", 
            "text": "Testing Methods\n\n\nThis section describes tips on testing your plugins to make them production ready, including:\n\n\n\n\nPlatform Support\n\n\nTest Deployment\n\n\nDebugging\n\n\nTroubleshooting\n\n\n\n\nPlatform Support\n\n\nThese are the tier 1 platforms and versions that the plugins are required to run on to be certified. These represent the minimum number of platforms that a plugin should be tested against before considering a plugin Generally Available (GA).\n\n\nLinux\n\n\n\n\nCentos 5.10\n\n\nCentos 6.5\n\n\nAmazon Linux AMI release 2014.03\n\n\nUbuntu 12.04 LTS\n\n\nUbuntu 14.04.1 LTS\n\n\n\n\nWindows\n\n\n\n\nWindows 2012\n\n\nWindows 2008R2\n\n\n\n\nTest Deployment\n\n\nPlugins are able to be deployed in a sandbox account which allows end to end testing. It is highly recommended that a plugin be end to end tested so to ensure correct operation and deployment of a plugin in a production environment.\n\n\nPrerequisites\n\n\n\n\nTrial or Paid account (Free accounts are not able to use plugins)\n\n\nA test meter for the target platform\n\n\nExisting GitHub repository with a plugin to be tested\n\n\nBoundary CLI tools installed (see \nTools\n)\n\n\n\n\nDeploying a Plugin for Testing\n\n\nDeploying a plugin for testing consists of:\n\n\n\n\nExposing the plugin to an account\n\n\nInstalling the plugin into the account\n\n\nDeploying to a test meter\n\n\n\n\nPlugin Debugging\n\n\nPlugin Troubleshooting\n\n\nOn the linux platforms\n\n\nUsing \nstrace", 
            "title": "Testing"
        }, 
        {
            "location": "/user-guide/testing/#testing-methods", 
            "text": "This section describes tips on testing your plugins to make them production ready, including:   Platform Support  Test Deployment  Debugging  Troubleshooting", 
            "title": "Testing Methods"
        }, 
        {
            "location": "/user-guide/testing/#platform-support", 
            "text": "These are the tier 1 platforms and versions that the plugins are required to run on to be certified. These represent the minimum number of platforms that a plugin should be tested against before considering a plugin Generally Available (GA).  Linux   Centos 5.10  Centos 6.5  Amazon Linux AMI release 2014.03  Ubuntu 12.04 LTS  Ubuntu 14.04.1 LTS   Windows   Windows 2012  Windows 2008R2", 
            "title": "Platform Support"
        }, 
        {
            "location": "/user-guide/testing/#test-deployment", 
            "text": "Plugins are able to be deployed in a sandbox account which allows end to end testing. It is highly recommended that a plugin be end to end tested so to ensure correct operation and deployment of a plugin in a production environment.  Prerequisites   Trial or Paid account (Free accounts are not able to use plugins)  A test meter for the target platform  Existing GitHub repository with a plugin to be tested  Boundary CLI tools installed (see  Tools )   Deploying a Plugin for Testing  Deploying a plugin for testing consists of:   Exposing the plugin to an account  Installing the plugin into the account  Deploying to a test meter   Plugin Debugging  Plugin Troubleshooting  On the linux platforms  Using  strace", 
            "title": "Test Deployment"
        }, 
        {
            "location": "/user-guide/troubleshooting/", 
            "text": "Troubleshooting Meter Plugins\n\n\nWe use the voltage meter analogy to trace the flow of measurements from the plugin to Boundary.\n\n\nThe pathway for measurements to be sent to Boundary is as follows:\n\n\n\n\nMeter plugin sends measurements to standard output via \nprotocol\n\n\nPlugin Manager (\npluginmgr\n) reads the standard out from the meter plugin\n\n\nPlugin Manager writes the measurement to the meter via the Meter(\nboundary-meter\n) RPC channel\n\n\nMeter reads the Meter RPC call sent by the Plugin Manager\n\n\nMeter sends the measurement to Boundary via an HTTPS Rest call\n\n\n\n\nThe sections that follow provide tools and techniques to trace the above data flow.\n\n\nNOTE:\n These techniques are currently only applicable to UNIX/Linux environments where tools are provide to trace the data flow.\n\n\nMeter Plugin sends measurements to standard output\n\n\nStandard output is \nfile descriptor\n \n1\n and using \nlsof\n we are able to see the file descriptor. Typical output is the following:\n\n\n...\nboundary- 24931 boundary    0r  FIFO                0,8      0t0  94785 pipe\n...\n\n\n\n\nTo view the output in real time we use \nstrace\n with the following options:\n\n\n$ sudo strace -e write=1 -e trace=write -p \nmeter plugin pid\n -s 256\n\n\n\n\nwhere the \nmeter plugin pid\n is obtains by running the following:\n\n\n[vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua\n\n\n\n\nThe meter plugins are identified by the option \n--lua init.lua\n and the number on the left indicates the process id.\n\n\nFrom our example above, we use the process ID to observe the meter plugins output:\n\n\n[vagrant@centos-6-6 ~]$ sudo strace -e write=1 -e trace=write -p 24931 -s 128\nProcess 24931 attached\nwrite(22, \nGET /_cluster/stats HTTP/1.1\\r\\nHost: 127.0.0.1:9200\\r\\nUser-Agent: Boundary Meter \nsupport@boundary.com\n\\r\\nConnection: close\\r\\n\\r\\n\n, 124) = 124\nwrite(1, \nELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\n\n, 76) = 76\n | 00000  45 4c 41 53 54 49 43 5f  53 45 41 52 43 48 5f 46  ELASTIC_SEARCH_F |\n | 00010  49 45 4c 44 44 41 54 41  5f 4d 45 4d 4f 52 59 5f  IELDDATA_MEMORY_ |\n | 00020  53 49 5a 45 20 30 2e 30  30 30 30 30 30 20 54 45  SIZE 0.000000 TE |\n | 00030  53 54 5f 45 4c 41 53 54  49 43 53 45 41 52 43 48  ST_ELASTICSEARCH |\n | 00040  5f 43 45 4e 54 4f 53 5f  36 5f 36 0a              _CENTOS_6_6.     |\n ...\n\n\n\n\nwhere above output is truncated, when running the command the output will be continuous with each write call by the meter plugins being displayed.\n\n\nPlugin Manager reads Meter Plugin\n\n\nWe can use \nstrace\n similarly to see the Plugin Manager read the output from the Meter Plugin. We obtain the pid the\nPlugin Manager (\npluginmgr\n) process id by :\n\n\n[vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua\n\n\n\n\nAnd the trace the read system call of the Plugin Manager:\n\n\n[vagrant@centos-6-6 ~]$ sudo strace -p 24704 -e trace=read -s 1024\nProcess 24704 attached\nread(22, \nELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_PRIMARY_SHARDS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_COMPLETION_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_STATUS 1.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FILTER_CACHE_EVICTIONS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_DOCUMENT_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_STORE_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_ID_CACHE_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FIELDDATA_EVICTIONS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FILTER_CACHE_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_INDEX_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_SEGMENT_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_TOTAL_SHARDS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_NODE_COUNT 1.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\n\n, 1024) = 981\nread(22, 0x7fffed12d370, 1024)          = -1 EAGAIN (Resource temporarily unavailable)\n\n\n\n\nPlugin Manager writes to the Meter\n\n\nUsing the same techniques above we can observe the Meter RPC call:\n\n\n[vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua\n\n\n\n\nAnd then trace the write call showing the Meter RPC call:\n\n\n[vagrant@centos-6-6 ~]$ sudo strace -p 24704 -e trace=write -s 1024\nProcess 24704 attached\nwrite(1, \n{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}\n, 179) = 179\nwrite(1, \n{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_PRIMARY_SHARDS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}\n, 172) = 172\nwrite(1, \n{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_COMPLETION_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}\n, 173) = 173\n\n\n\n\nMeter reads the RPC call from the Plugin Manager\n\n\n[vagrant@centos-6-6 ~]$ sudo strace -p 24698 -e trace=read -s 1024 | more\nProcess 24698 attached\nread(20, \n{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_PRIMARY_SHARDS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_COMPLETION_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_STATUS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:1.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_FILTER_CACHE_EVICTIONS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_DOCUMENT_COUNT\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nv\n, 1024) = 1024\nread(20, \nalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_STORE_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_ID_CACHE_MEMORY_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_FIELDDATA_EVICTIONS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_FILTER_CACHE_MEMORY_SIZE\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_INDEX_COUNT\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_SEGMENT_COUNT\\\n,\\\nhostname\\\n:\\\nTEST_ELASTIC\n, 1024) = 1024\nread(20, \nSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_TOTAL_SHARDS\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:0.000000}}{\\\njsonrpc\\\n:\\\n2.0\\\n,\\\nmethod\\\n:\\\nmetric\\\n,\\\nparams\\\n:{\\\nplugin\\\n:\\\nelasticsearch\\\n,\\\nmetric\\\n:\\\nELASTIC_SEARCH_NODE_COUNT\\\n,\\\nhostname\\\n:\\\nTEST_ELASTICSEARCH_CENTOS_6_6\\\n,\\\nvalue\\\n:1.000000}}\n, 1024) = 375\nread(20, 0x7fff79e5f850, 1024)          = -1 EAGAIN (Resource temporarily unavailable)", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/user-guide/troubleshooting/#troubleshooting-meter-plugins", 
            "text": "We use the voltage meter analogy to trace the flow of measurements from the plugin to Boundary.  The pathway for measurements to be sent to Boundary is as follows:   Meter plugin sends measurements to standard output via  protocol  Plugin Manager ( pluginmgr ) reads the standard out from the meter plugin  Plugin Manager writes the measurement to the meter via the Meter( boundary-meter ) RPC channel  Meter reads the Meter RPC call sent by the Plugin Manager  Meter sends the measurement to Boundary via an HTTPS Rest call   The sections that follow provide tools and techniques to trace the above data flow.  NOTE:  These techniques are currently only applicable to UNIX/Linux environments where tools are provide to trace the data flow.", 
            "title": "Troubleshooting Meter Plugins"
        }, 
        {
            "location": "/user-guide/troubleshooting/#meter-plugin-sends-measurements-to-standard-output", 
            "text": "Standard output is  file descriptor   1  and using  lsof  we are able to see the file descriptor. Typical output is the following:  ...\nboundary- 24931 boundary    0r  FIFO                0,8      0t0  94785 pipe\n...  To view the output in real time we use  strace  with the following options:  $ sudo strace -e write=1 -e trace=write -p  meter plugin pid  -s 256  where the  meter plugin pid  is obtains by running the following:  [vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua  The meter plugins are identified by the option  --lua init.lua  and the number on the left indicates the process id.  From our example above, we use the process ID to observe the meter plugins output:  [vagrant@centos-6-6 ~]$ sudo strace -e write=1 -e trace=write -p 24931 -s 128\nProcess 24931 attached\nwrite(22,  GET /_cluster/stats HTTP/1.1\\r\\nHost: 127.0.0.1:9200\\r\\nUser-Agent: Boundary Meter  support@boundary.com \\r\\nConnection: close\\r\\n\\r\\n , 124) = 124\nwrite(1,  ELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\n , 76) = 76\n | 00000  45 4c 41 53 54 49 43 5f  53 45 41 52 43 48 5f 46  ELASTIC_SEARCH_F |\n | 00010  49 45 4c 44 44 41 54 41  5f 4d 45 4d 4f 52 59 5f  IELDDATA_MEMORY_ |\n | 00020  53 49 5a 45 20 30 2e 30  30 30 30 30 30 20 54 45  SIZE 0.000000 TE |\n | 00030  53 54 5f 45 4c 41 53 54  49 43 53 45 41 52 43 48  ST_ELASTICSEARCH |\n | 00040  5f 43 45 4e 54 4f 53 5f  36 5f 36 0a              _CENTOS_6_6.     |\n ...  where above output is truncated, when running the command the output will be continuous with each write call by the meter plugins being displayed.", 
            "title": "Meter Plugin sends measurements to standard output"
        }, 
        {
            "location": "/user-guide/troubleshooting/#plugin-manager-reads-meter-plugin", 
            "text": "We can use  strace  similarly to see the Plugin Manager read the output from the Meter Plugin. We obtain the pid the\nPlugin Manager ( pluginmgr ) process id by :  [vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua  And the trace the read system call of the Plugin Manager:  [vagrant@centos-6-6 ~]$ sudo strace -p 24704 -e trace=read -s 1024\nProcess 24704 attached\nread(22,  ELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_PRIMARY_SHARDS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_COMPLETION_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_STATUS 1.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FILTER_CACHE_EVICTIONS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_DOCUMENT_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_STORE_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_ID_CACHE_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FIELDDATA_EVICTIONS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_FILTER_CACHE_MEMORY_SIZE 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_INDEX_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_SEGMENT_COUNT 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_TOTAL_SHARDS 0.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\nELASTIC_SEARCH_NODE_COUNT 1.000000 TEST_ELASTICSEARCH_CENTOS_6_6\\n , 1024) = 981\nread(22, 0x7fffed12d370, 1024)          = -1 EAGAIN (Resource temporarily unavailable)", 
            "title": "Plugin Manager reads Meter Plugin"
        }, 
        {
            "location": "/user-guide/troubleshooting/#plugin-manager-writes-to-the-meter", 
            "text": "Using the same techniques above we can observe the Meter RPC call:  [vagrant@centos-6-6 ~]$ pgrep -flu boundary\n24698 /usr/bin/boundary-meter -b /etc/boundary -I boundary-meter -G\n24704 pluginmgr --pluginmgr /usr/bin/boundary-meter --basedir /etc/boundary --extdir /etc/boundary --hostname centos-6-6.hsd1.ca.comcast.net\n24736 httpcheck --lua init.lua\n24931 elasticsearch --lua init.lua  And then trace the write call showing the Meter RPC call:  [vagrant@centos-6-6 ~]$ sudo strace -p 24704 -e trace=write -s 1024\nProcess 24704 attached\nwrite(1,  {\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}} , 179) = 179\nwrite(1,  {\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_PRIMARY_SHARDS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}} , 172) = 172\nwrite(1,  {\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_COMPLETION_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}} , 173) = 173", 
            "title": "Plugin Manager writes to the Meter"
        }, 
        {
            "location": "/user-guide/troubleshooting/#meter-reads-the-rpc-call-from-the-plugin-manager", 
            "text": "[vagrant@centos-6-6 ~]$ sudo strace -p 24698 -e trace=read -s 1024 | more\nProcess 24698 attached\nread(20,  {\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_FIELDDATA_MEMORY_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_PRIMARY_SHARDS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_COMPLETION_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_STATUS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :1.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_FILTER_CACHE_EVICTIONS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_DOCUMENT_COUNT\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ v , 1024) = 1024\nread(20,  alue\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_STORE_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_ID_CACHE_MEMORY_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_FIELDDATA_EVICTIONS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_FILTER_CACHE_MEMORY_SIZE\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_INDEX_COUNT\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_SEGMENT_COUNT\\ ,\\ hostname\\ :\\ TEST_ELASTIC , 1024) = 1024\nread(20,  SEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_TOTAL_SHARDS\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :0.000000}}{\\ jsonrpc\\ :\\ 2.0\\ ,\\ method\\ :\\ metric\\ ,\\ params\\ :{\\ plugin\\ :\\ elasticsearch\\ ,\\ metric\\ :\\ ELASTIC_SEARCH_NODE_COUNT\\ ,\\ hostname\\ :\\ TEST_ELASTICSEARCH_CENTOS_6_6\\ ,\\ value\\ :1.000000}} , 1024) = 375\nread(20, 0x7fff79e5f850, 1024)          = -1 EAGAIN (Resource temporarily unavailable)", 
            "title": "Meter reads the RPC call from the Plugin Manager"
        }, 
        {
            "location": "/user-guide/documentation/", 
            "text": "Documentation\n\n\nThis section describes the required documentation to provide with each plugin. The principal documentation is provided in a \nREADME.md\n in the top-level directory of the GitHub repository. \n\n\nRequirements Elements within README.md\n\n\nNec aliud mihi suem fronte ensem hinc\n\n\nThe contents of the README.md are displayed within the Boundary Settings =\n Plugin dialog\n\n\nLorem markdownum malis arbusta \nmaneat\n; ut et hinc turribus, tenebat montes\n\nius viscera amans\n, obstantia. \nPars intremuit\n mihi. Surgit diro membris.\nRevertar erat gurgite animosa, at ignoto et dato.\n\n\nREADME.md\n Example\n\n\nThe following\n\n\nBoundary Meter Plugin\n-------------------------\n\nCollects metrics from a memcached instance. See video [walkthrough](https://help.boundary.com/hc/articles/201816101).\n\n### Prerequisites\n\n|     OS    | Linux | Windows | SmartOS | OS X |\n|:----------|:-----:|:-------:|:-------:|:----:|\n| Supported |   v   |    v    |    v    |  v   |\n\n|  Runtime | node.js | Python | Java |\n|:---------|:-------:|:------:|:----:|\n| Required |    +    |        |      |\n\n- [How to install node.js?](https://help.boundary.com/hc/articles/202360701)\n\n### Plugin Setup\nNone\n\n#### Plugin Configuration Fields\n\n|Field Name|Description                                                |\n|:---------|:----------------------------------------------------------|\n|Source    |The source to display in the legend for the MEMCACHED data.|\n|Port      |The MEMCACHED port.                                        |\n|Host      |The MEMCACHED hostname.                                    |\n\n### Metrics Collected\n|Metric Name          |Description                       |\n|:--------------------|:---------------------------------|\n|Memcached Allocated  |Percent of available memory used  |\n|Memcached Connections|Number of current connections     |\n|Memcached Hits       |Number of cache hits              |\n|Memcached Misses     |Number of cache misses            |\n|Memcached Items      |Total number of items in cache    |\n|Memcached Requests   |Number of requests                |\n|Memcached Network In |Number of bytes read from network |\n|Memcached Network Out|Number of bytes written to network|", 
            "title": "Documentation"
        }, 
        {
            "location": "/user-guide/documentation/#documentation", 
            "text": "This section describes the required documentation to provide with each plugin. The principal documentation is provided in a  README.md  in the top-level directory of the GitHub repository.", 
            "title": "Documentation"
        }, 
        {
            "location": "/user-guide/documentation/#requirements-elements-within-readmemd", 
            "text": "", 
            "title": "Requirements Elements within README.md"
        }, 
        {
            "location": "/user-guide/documentation/#nec-aliud-mihi-suem-fronte-ensem-hinc", 
            "text": "The contents of the README.md are displayed within the Boundary Settings =  Plugin dialog  Lorem markdownum malis arbusta  maneat ; ut et hinc turribus, tenebat montes ius viscera amans , obstantia.  Pars intremuit  mihi. Surgit diro membris.\nRevertar erat gurgite animosa, at ignoto et dato.", 
            "title": "Nec aliud mihi suem fronte ensem hinc"
        }, 
        {
            "location": "/user-guide/documentation/#readmemd-example", 
            "text": "The following  Boundary Meter Plugin\n-------------------------\n\nCollects metrics from a memcached instance. See video [walkthrough](https://help.boundary.com/hc/articles/201816101).\n\n### Prerequisites\n\n|     OS    | Linux | Windows | SmartOS | OS X |\n|:----------|:-----:|:-------:|:-------:|:----:|\n| Supported |   v   |    v    |    v    |  v   |\n\n|  Runtime | node.js | Python | Java |\n|:---------|:-------:|:------:|:----:|\n| Required |    +    |        |      |\n\n- [How to install node.js?](https://help.boundary.com/hc/articles/202360701)\n\n### Plugin Setup\nNone\n\n#### Plugin Configuration Fields\n\n|Field Name|Description                                                |\n|:---------|:----------------------------------------------------------|\n|Source    |The source to display in the legend for the MEMCACHED data.|\n|Port      |The MEMCACHED port.                                        |\n|Host      |The MEMCACHED hostname.                                    |\n\n### Metrics Collected\n|Metric Name          |Description                       |\n|:--------------------|:---------------------------------|\n|Memcached Allocated  |Percent of available memory used  |\n|Memcached Connections|Number of current connections     |\n|Memcached Hits       |Number of cache hits              |\n|Memcached Misses     |Number of cache misses            |\n|Memcached Items      |Total number of items in cache    |\n|Memcached Requests   |Number of requests                |\n|Memcached Network In |Number of bytes read from network |\n|Memcached Network Out|Number of bytes written to network|", 
            "title": "README.md Example"
        }, 
        {
            "location": "/user-guide/production/", 
            "text": "", 
            "title": "Production"
        }, 
        {
            "location": "/user-guide/examples/", 
            "text": "Examples\n\n\nThis section provides a discussion of example plugins created in lua. Although, meter plugins can be created in other languages, lua is considered the lingua franca of meter plugins due to a lua interpreter built into the meter itself. Additionally, the built in lua interperter includes luvit which provides a rich API for integrating and collect metrics from foreign sources using HTTP(S) protocol, log files, etc.\n\n\nAn overview of each of the examples is described below.\n\n\nHello World\n\n\nThe quinessential example program is the \nHello World\n program that is included in nearly every programming language, examples of said programs are listed \nhere\n. This initial examples demonstrates the mechanics of developing and deploying a meter plugin.\n\n\nGo To \nHelloWorld\n\n\nHello World \npart deux\n\n\nThis example is a redux of the example Hello World plugin but uses the \nBoundary Lua Plugin Framework\n for its implementation\n\n\nGo To \nHelloWorld\n\n\nGive it a REST\n\n\nThis example shows how to collect measurement information from a RESTful interface using the \nBoundary Lua Plugin Framework\n\n\nThe Meter and Me, and the Plugin makes Three\n\n\nDemonstrates a plugin that use the meter \nJSON RPC\n interface to extract measurements collected by the meter into a meter plugin.\n\n\n\"Yes Log, all kids love log\"\n\n\nPlugin that monitors a log (Syslog or other application) and uses regular expressions to parse measurements from the content.", 
            "title": "Example Overview"
        }, 
        {
            "location": "/user-guide/examples/#examples", 
            "text": "This section provides a discussion of example plugins created in lua. Although, meter plugins can be created in other languages, lua is considered the lingua franca of meter plugins due to a lua interpreter built into the meter itself. Additionally, the built in lua interperter includes luvit which provides a rich API for integrating and collect metrics from foreign sources using HTTP(S) protocol, log files, etc.  An overview of each of the examples is described below.", 
            "title": "Examples"
        }, 
        {
            "location": "/user-guide/examples/#hello-world", 
            "text": "The quinessential example program is the  Hello World  program that is included in nearly every programming language, examples of said programs are listed  here . This initial examples demonstrates the mechanics of developing and deploying a meter plugin.  Go To  HelloWorld", 
            "title": "Hello World"
        }, 
        {
            "location": "/user-guide/examples/#hello-world-part-deux", 
            "text": "This example is a redux of the example Hello World plugin but uses the  Boundary Lua Plugin Framework  for its implementation  Go To  HelloWorld", 
            "title": "Hello World part deux"
        }, 
        {
            "location": "/user-guide/examples/#give-it-a-rest", 
            "text": "This example shows how to collect measurement information from a RESTful interface using the  Boundary Lua Plugin Framework", 
            "title": "Give it a REST"
        }, 
        {
            "location": "/user-guide/examples/#the-meter-and-me-and-the-plugin-makes-three", 
            "text": "Demonstrates a plugin that use the meter  JSON RPC  interface to extract measurements collected by the meter into a meter plugin.", 
            "title": "The Meter and Me, and the Plugin makes Three"
        }, 
        {
            "location": "/user-guide/examples/#yes-log-all-kids-love-log", 
            "text": "Plugin that monitors a log (Syslog or other application) and uses regular expressions to parse measurements from the content.", 
            "title": "\"Yes Log, all kids love log\""
        }, 
        {
            "location": "/user-guide/example-hello-world/", 
            "text": "Example - Hello World\n\n\nIn the classic Hello World fashion", 
            "title": "Example - Hello World"
        }, 
        {
            "location": "/user-guide/example-hello-world/#example-hello-world", 
            "text": "In the classic Hello World fashion", 
            "title": "Example - Hello World"
        }, 
        {
            "location": "/user-guide/example-hello-world2/", 
            "text": "Example #1 - Give It a REST", 
            "title": "Example - Hello World part duex"
        }, 
        {
            "location": "/user-guide/example-hello-world2/#example-1-give-it-a-rest", 
            "text": "", 
            "title": "Example #1 - Give It a REST"
        }, 
        {
            "location": "/user-guide/example-hello-world2/", 
            "text": "Example #1 - Give It a REST", 
            "title": "Example - Give it a REST"
        }, 
        {
            "location": "/user-guide/example-hello-world2/#example-1-give-it-a-rest", 
            "text": "", 
            "title": "Example #1 - Give It a REST"
        }, 
        {
            "location": "/user-guide/example-hello-world2/", 
            "text": "Example #1 - Give It a REST", 
            "title": "Example - The Meter and Me, and the Plugin makes Three"
        }, 
        {
            "location": "/user-guide/example-hello-world2/#example-1-give-it-a-rest", 
            "text": "", 
            "title": "Example #1 - Give It a REST"
        }, 
        {
            "location": "/user-guide/additional-examples/", 
            "text": "Additional Examples", 
            "title": "Additional Examples"
        }, 
        {
            "location": "/user-guide/additional-examples/#additional-examples", 
            "text": "", 
            "title": "Additional Examples"
        }, 
        {
            "location": "/user-guide/lua-framework-overview/", 
            "text": "Lua Framework Overvew\n\n\nTopic 1\n\n\nTopic 2\n\n\nTopic 3\n\n\nTopic 4", 
            "title": "Lua Plugin Framework"
        }, 
        {
            "location": "/user-guide/lua-framework-overview/#lua-framework-overvew", 
            "text": "Topic 1  Topic 2  Topic 3  Topic 4", 
            "title": "Lua Framework Overvew"
        }, 
        {
            "location": "/user-guide/checklist/", 
            "text": "Meter Plugin Development Checklist\n\n\nThe following is a master checklist for the development of a Boundary Meter Plug\n\n\nContents\n\n\nRequired\n\n\n\n\n[ ]\nplugin.json\n\n\n[ ]metrics.json\n\n\n[ ]\nREADME.md\n\n\n[ ]LICENSE\n\n\n[ ]icon.png\n\n\n[ ]Erat solis corpus\n\n\n[ ]In est verum strata ad Nocte\n\n\n\n\nDocumentation\n\n\n\n\n[ ]Description of the plugin\n\n\n[ ]Setup instructions\n\n\n[ ]Field Descriptions\n\n\n[ ]Metrics Generated\n\n\n[ ]Erat solis corpus\n\n\n[ ]In est verum strata ad Nocte\n\n\n\n\nTesting\n\n\n\n\n[ ]Verfied Output on Standard Out\n\n\n[ ]Verified\n\n\n[ ]Meae quoque\n\n\n[ ]Tibia auratis fatorum perspicit non consuetas quae\n\n\n[ ]Erat solis corpus\n\n\n[ ]In est verum strata ad Nocte\n\n\n\n\nPlatform\n\n\nTier 1 platform coverage for GA (General Availability)\n\n\n\n\n[ ]Linux\n\n\n[ ]Centos 5.10\n\n\n[ ]Centos 6.5\n\n\n[ ]Amazon Linux AMI release 2014.03\n\n\n[ ]Ubuntu 12.04 LTS\n\n\n\n\n[ ]Ubuntu 14.04.1 LTS\n\n\n\n\n\n\n[ ]Windows\n\n\n\n\n[ ]Windows 2012\n\n\n[ ]Windows 2008R2\n\n\n\n\nProduction\n\n\n\n\n[ ]In nulla producet Iuppiter\n\n\n[ ]Quod silvasque insula uror cuncta\n\n\n[ ]Meae quoque\n\n\n[ ]Tibia auratis fatorum perspicit non consuetas quae\n\n\n[ ]Erat solis corpus\n\n\n[ ]In est verum strata ad Nocte", 
            "title": "Checklist"
        }, 
        {
            "location": "/user-guide/checklist/#meter-plugin-development-checklist", 
            "text": "The following is a master checklist for the development of a Boundary Meter Plug", 
            "title": "Meter Plugin Development Checklist"
        }, 
        {
            "location": "/user-guide/checklist/#contents", 
            "text": "Required   [ ] plugin.json  [ ]metrics.json  [ ] README.md  [ ]LICENSE  [ ]icon.png  [ ]Erat solis corpus  [ ]In est verum strata ad Nocte", 
            "title": "Contents"
        }, 
        {
            "location": "/user-guide/checklist/#documentation", 
            "text": "[ ]Description of the plugin  [ ]Setup instructions  [ ]Field Descriptions  [ ]Metrics Generated  [ ]Erat solis corpus  [ ]In est verum strata ad Nocte", 
            "title": "Documentation"
        }, 
        {
            "location": "/user-guide/checklist/#testing", 
            "text": "[ ]Verfied Output on Standard Out  [ ]Verified  [ ]Meae quoque  [ ]Tibia auratis fatorum perspicit non consuetas quae  [ ]Erat solis corpus  [ ]In est verum strata ad Nocte", 
            "title": "Testing"
        }, 
        {
            "location": "/user-guide/checklist/#platform", 
            "text": "Tier 1 platform coverage for GA (General Availability)   [ ]Linux  [ ]Centos 5.10  [ ]Centos 6.5  [ ]Amazon Linux AMI release 2014.03  [ ]Ubuntu 12.04 LTS   [ ]Ubuntu 14.04.1 LTS    [ ]Windows   [ ]Windows 2012  [ ]Windows 2008R2", 
            "title": "Platform"
        }, 
        {
            "location": "/user-guide/checklist/#production", 
            "text": "[ ]In nulla producet Iuppiter  [ ]Quod silvasque insula uror cuncta  [ ]Meae quoque  [ ]Tibia auratis fatorum perspicit non consuetas quae  [ ]Erat solis corpus  [ ]In est verum strata ad Nocte", 
            "title": "Production"
        }, 
        {
            "location": "/user-guide/tools/", 
            "text": "Meter Plugin Development Tools\n\n\nThe following describes tools that are useful in the development of Boundary Meter Plugins.\n\n\njsonlint\n\n\nCommand line tools for validation of JSON such as \nplugin.json\n, \nmetrics.json\n, \nparam.json\n\n\nhttps://www.npmjs.org/package/jsonlint\n\n\nBoundary API CLI\n\n\nCommand line interface to some of Boundary's public APIs. Commands include definition of metrics, insertion of metric values, staging of a meter plugin, and others. Instructions on installing the Boundary API CLI can be found here:\n\n\nhttps://github.com/boundary/boundary-api-cli\n\n\nHaroopad\n\n\nEditor that provides realtime rendering of markdown.\n\n\nhttp://pad.haroopress.com/user.html\n\n\nGrip\n\n\nPreview README.md or other \nMarkdown\n files before committing to \nGitHub\n\n\nhttps://github.com/joeyespo/grip\n\n\nMkdocs\n\n\nExcellent tool for authoring extensive documentation, in Markdown, , in Markdown,beyond a simple README.md for your plugin. Allows seamless publishing to \nGitHub Pages\n\n\nhttp://www.mkdocs.org/", 
            "title": "Tools"
        }, 
        {
            "location": "/user-guide/tools/#meter-plugin-development-tools", 
            "text": "The following describes tools that are useful in the development of Boundary Meter Plugins.  jsonlint  Command line tools for validation of JSON such as  plugin.json ,  metrics.json ,  param.json  https://www.npmjs.org/package/jsonlint  Boundary API CLI  Command line interface to some of Boundary's public APIs. Commands include definition of metrics, insertion of metric values, staging of a meter plugin, and others. Instructions on installing the Boundary API CLI can be found here:  https://github.com/boundary/boundary-api-cli  Haroopad  Editor that provides realtime rendering of markdown.  http://pad.haroopress.com/user.html  Grip  Preview README.md or other  Markdown  files before committing to  GitHub  https://github.com/joeyespo/grip  Mkdocs  Excellent tool for authoring extensive documentation, in Markdown, , in Markdown,beyond a simple README.md for your plugin. Allows seamless publishing to  GitHub Pages  http://www.mkdocs.org/", 
            "title": "Meter Plugin Development Tools"
        }
    ]
}